var raycaster = new THREE.Raycaster();

//laser parameters
var maxLasers = 16;
var nActive = 0;
var beamLength = 100;
var laserVelocity = 1000;
var lasers = [];
var collisionDist = beamLength;
var maxLaserDist = -1000; // distance before laser disappears
var laserRadius = 0.5;
var laserRadius = 0.5;
var laserGeom = new THREE.CylinderGeometry(laserRadius,laserRadius,beamLength, 4);
var mouse = new THREE.Vector2();

laserGeom.applyMatrix(new THREE.Matrix4().makeTranslation(0, beamLength/2, 0));
laserGeom.applyMatrix(new THREE.Matrix4().makeRotationX(Math.PI/2));
var laserMat = new THREE.MeshPhongMaterial({
	ambient : 0,
        emissive : 0xff0000,
        color : 0xff0000,
        specular : 0x101010,
        shininess: 20
});

function onMouseMove(event) {
        mouse.x = (event.clientX / window.innerWidth) * 2 - 1;
        mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;
}

function onMouseDown(event) {
	raycaster.setFromCamera(mouse, camera);
	var laser = new THREE.Mesh(laserGeom, laserMat);
	laser.position = camera.position;
	laser.dir = raycaster.ray.direction;
	lasers.push(laser);
}

function animateLasers(t){
	var newPos = new THREE. Vector3(0,0,0);
	for (var i = 0; i < lasers.length; i++){
		if (typeof lasers[i] != "undefined"){
		lasers[i].time += t;
		newPos.copy(lasers[i].dir);
		newPos.multiplyScalar(lasers[i].time * laserVelocity);
		lasers[i].position.copy(newPos);
		lasers[i].lookAt(lasers[i].dir);
		raycaster.set(lasers[i].position, lasers[i].dir);

		if (lasers[i].position.z < maxLaserDist)
			delete lasers[i];
		}
	}

}

window.addEventListener('mousedown', onMouseDown, false);
window.addEventListener('mousemove', onMouseMove, false);
