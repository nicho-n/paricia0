if ( ! Detector.webgl ) Detector.addGetWebGLMessage();
var MARGIN = 0;
var SCREEN_HEIGHT = window.innerHeight - MARGIN * 2;
var SCREEN_WIDTH  = window.innerWidth;
var textureLoader = new THREE.TextureLoader();
var radius = 6371;
var spheres = [];
var clouds = [];
var tilt = 0.41;
var rotationSpeed = 0.02;
var cloudsScale = 1.005;
var moonScale = 0.23;
var composer;
var scene;
var clock = new THREE.Clock();
//var d, dPlanet, dMoon, dMoonVec = new THREE.Vector3();
var camera;
var meshMoon;
var meshPlanet;
var controls;
var player;
var test;
var messages;
var textlabels = [];
var players = {};
var socket = io();
var renderedPlayers = {};
var playerID = -1;
var spaceStuff = [];
var loader;
var conencted = false;

init();
animate();

function loadSpaceDock(i, loader){
	spaceStuff.push(new THREE.Object3D());
	spaceStuff[i].position.x = -560;
	spaceStuff[i].position.y = -500;
	spaceStuff[i].position.z = 24593;
	spaceStuff[i].scale.set (250,250,250);
	//spaceStuff[i].updateMatrix();
	loader.load('spaceships/spacedock/spacedock.obj',
		function (object){
			spaceStuff[i].add(object);
		},
	);

	var newDir = new THREE.Vector3(0, 0, 0);
	var pos = new THREE.Vector3();
	pos.addVectors(newDir, spaceStuff[i].position);
	spaceStuff[i].lookAt(pos);
	scene.add(spaceStuff[i]);

        var text = _createTextLabel();
        text.setHTML("Dock");
        text.setParent(spaceStuff[i]);
        this.textlabels.push(text);
        this.container.appendChild(text.element);


}


function loadOtherPlayer(i, loader){
	renderedPlayers[i] = new THREE.Object3D();
        renderedPlayers[i].position.x = players[i].x;
        renderedPlayers[i].position.y = players[i].y;
        renderedPlayers[i].position.z = players[i].z;
	//renderedPlayers[i].scale.set(50,50,50);
        loader.load('spaceships/spaceship.obj',
        	function ( object ) {
                	renderedPlayers[i].add(object);
                },
        );
        	scene.add(renderedPlayers[i]);

}

function loadPlayer(username){
        playerInfo = new Player(username,0,0,0,31845);
        player = new THREE.Object3D();
        player.position.x = 0;
        player.position.y = 0;
        player.position.z = 31845;
        // load a resource

        loader.load('spaceships/spaceship.obj',
                function ( object ) {
                        player.add(object);
                },
        );
        playerInfo.x = player.position.x;
        playerInfo.y = player.position.y;
        playerInfo.z = player.position.z;
        scene.add(player);
        camera = new THREE.PerspectiveCamera(25, SCREEN_WIDTH / SCREEN_HEIGHT, $
        player.add(camera);
        camera.position.set(0, 14, 100);
        controls = new THREE.FlyControls(player);

        controls.movementSpeed = 1000;
        controls.domElement = container;
        controls.rollSpeed = Math.PI / 24;
        controls.autoForward = false;
        controls.dragToLook = false;


        socket.emit('player joined', playerInfo);
}

function init(){

	socket.on('add current players', function(allPlayers){
		players = allPlayers;
		players[playerID] = 0;
	});

	socket.on('client disconnecting', function(playerTuple){
		scene.remove(renderedPlayers[playerTuple[0]]);
                delete players[playerTuple[0]];
		delete renderedPlayers[playerTuple[0]];
	//	delete players[playerTuple[1]];
	});

	socket.on('player joined', function(newPlayerTuple){
		players[newPlayerTuple[0]] = newPlayerTuple[1];
		loadOtherPlayer(newPlayerTuple[0], loader);
	});

	socket.on('position change', function (playerTuple){
		if (playerTuple[0] != playerID){
		players[playerTuple[0]] = playerTuple[1];
		renderedPlayers[playerTuple[0]].position.x = playerTuple[1].x;
		renderedPlayers[playerTuple[0]].position.y = playerTuple[1].y;
		renderedPlayers[playerTuple[0]].position.z = playerTuple[1].z;
		}
	});

	socket.on('receive player id', function(id){
		playerID = id;
	});

	function drawPlanet(radius, widthSegments, heightSegments, materialNormalMap, scene, texture, x, y, z){
                geometry = new THREE.SphereGeometry(radius, widthSegments, heightSegments);
                meshPlanet = new THREE.Mesh(geometry, materialNormalMap);
                meshPlanet.rotation.y = 0;
                meshPlanet.rotation.z = tilt;
                meshPlanet.position.set(x, y, z);
                scene.add(meshPlanet);
                spheres.push(meshPlanet);
                var materialClouds = new THREE.MeshLambertMaterial( {
                        map: textureLoader.load(texture),
                        transparent: true
                } );
                meshClouds = new THREE.Mesh(geometry, materialClouds);
                meshClouds.scale.set(cloudsScale, cloudsScale, cloudsScale);
                meshClouds.rotation.z = tilt;
                meshClouds.position.set(x, y, z);
                scene.add(meshClouds);
                clouds.push(meshClouds);

			var text = _createTextLabel();
      			text.setHTML("Planet 1");
      			text.setParent(meshPlanet);
      			this.textlabels.push(text);
      			this.container.appendChild(text.element);
        }

	function drawMoon(geometry, moonScale, radius, x, y, z){
                var materialMoon = new THREE.MeshLambertMaterial( {
                        map: textureLoader.load("textures/planets/moon_1024.jpg")
                } );
                meshMoon = new THREE.Mesh( geometry, materialMoon );
                meshMoon.position.set(x, y, z);
                meshMoon.scale.set(moonScale, moonScale, moonScale);
                scene.add(meshMoon);
                spheres.push(meshMoon);
        }

	container = document.createElement('div');
	pos = document.getElementById("pos");
	messages = document.getElementById("messages");
	document.body.appendChild(container);
        scene = new THREE.Scene();
	loader = new THREE.OBJLoader();

	var dirLight = new THREE.DirectionalLight(0xffffff);
	var textlabels = [];
        dirLight.position.set(-1, 0, 1).normalize();
        scene.fog = new THREE.FogExp2(0x000000, 0.00000025);
	scene.add(dirLight);

        var materialNormalMap = new THREE.MeshPhongMaterial( {
        	specular: 0x333333,
                shininess: 15,
                map: textureLoader.load( "textures/planets/earth_atmos_2048.jpg" ),
                specularMap: textureLoader.load( "textures/planets/earth_specular_2048.jpg" ),
                normalMap: textureLoader.load( "textures/planets/earth_normal_2048.jpg" ), 
                normalScale: new THREE.Vector2( 0.85, 0.85 )
        } );

	var materialSunMap = new THREE.MeshPhongMaterial( {
        	specular: 0x333333,
               	shininess: 15,
                map: textureLoader.load( "textures/planets/suntexture.jpg" ),
                specularMap: textureLoader.load( "textures/planets/suntexture.jpg" ),
                normalMap: textureLoader.load( "textures/planets/suntexture.jpg" ), 
                normalScale: new THREE.Vector2( 0.85, 0.85 )
        } );

        drawPlanet(radius*2, 100, 50, materialSunMap, scene, "textures/planets/marstexture2.jpg", -2000, 4000, 0);
        drawMoon(geometry, moonScale, radius, 150000, 5000, 5000);
        //drawPlanet(radius*50, 100, 50, materialSunMap, scene, "textures/planets/suntexture.jpg", -32737, 7737, -44147);

	// stars
	var i, r = radius, starsGeometry = [ new THREE.Geometry(), new THREE.Geometry() ];
	for ( i = 0; i < 15000; i ++ ) {
		var vertex = new THREE.Vector3();
		vertex.x = Math.random() * 2 - 1;
		vertex.y = Math.random() * 2 - 1;
		vertex.z = Math.random() * 2 - 1;
		vertex.multiplyScalar( r );
		starsGeometry[ 0 ].vertices.push( vertex );
	}

	for ( i = 0; i < 15000; i ++ ) {
		var vertex = new THREE.Vector3();
		vertex.x = Math.random() * 2 - 1;
		vertex.y = Math.random() * 2 - 1;
		vertex.z = Math.random() * 2 - 1;
		vertex.multiplyScalar( r );
		starsGeometry[ 1 ].vertices.push( vertex );
	}

	var stars;
	var starsMaterials = [
		new THREE.PointsMaterial( { color: 0x555555, size: 2, sizeAttenuation: false } ),
		new THREE.PointsMaterial( { color: 0x555555, size: 1, sizeAttenuation: false } ),
		new THREE.PointsMaterial( { color: 0x333333, size: 2, sizeAttenuation: false } ),
		new THREE.PointsMaterial( { color: 0x3a3a3a, size: 1, sizeAttenuation: false } ),
		new THREE.PointsMaterial( { color: 0x1a1a1a, size: 2, sizeAttenuation: false } ),
		new THREE.PointsMaterial( { color: 0x1a1a1a, size: 1, sizeAttenuation: false } )
	];

	for ( i = 10; i < 30; i ++ ) {
		stars = new THREE.Points( starsGeometry[ i % 2 ], starsMaterials[ i % 6 ] );
		stars.rotation.x = Math.random() * 6;
		stars.rotation.y = Math.random() * 6;
		stars.rotation.z = Math.random() * 6;
		stars.scale.setScalar( i * 10 );
		stars.matrixAutoUpdate = false;
		stars.updateMatrix();
		scene.add( stars );
	}

	renderer = new THREE.WebGLRenderer();
        renderer.setPixelRatio( window.devicePixelRatio );
        renderer.setSize( SCREEN_WIDTH, SCREEN_HEIGHT );
        container.appendChild( renderer.domElement );
        //stats = new Stats();
        //container.appendChild( stats.dom );
        window.addEventListener( 'resize', onWindowResize, false );
        // postprocessing
        var renderModel = new THREE.RenderPass( scene, camera );
        var effectFilm = new THREE.FilmPass( 0.35, 0.75, 2048, false );
        effectFilm.renderToScreen = true;
        composer = new THREE.EffectComposer( renderer );
        composer.addPass( renderModel );
        composer.addPass( effectFilm );
        loadSpaceDock(0, loader);

}

function onWindowResize( event ) {
	SCREEN_HEIGHT = window.innerHeight;
        SCREEN_WIDTH  = window.innerWidth;
        renderer.setSize(SCREEN_WIDTH, SCREEN_HEIGHT);
        camera.aspect = SCREEN_WIDTH / SCREEN_HEIGHT;
        camera.updateProjectionMatrix();
        composer.reset();
}

function animate() {
	requestAnimationFrame( animate );
       	render();
//        stats.update();
}

function render() {
	for(var i=0; i<this.textlabels.length; i++)
        	this.textlabels[i].updatePosition();
        var delta = clock.getDelta();
//	spaceStuff[0].position.x += .01;
        for (var i = 0; i < spheres.length; i++)
        	spheres[i].rotation.y += rotationSpeed * delta;
        for (var i = 0; i < clouds.length; i++)
       		clouds[i].rotation.y += 1.25 * rotationSpeed * delta;

        controls.update(delta);
        composer.render(delta);
	renderer.render( scene, camera );
	if (playerInfo.username){
        	pos.innerHTML = player.position.x + "," + player.position.y + "," + player.position.z;
		if (player.position.x != test.x || player.position.y != test.y || player.position.z != test.z){
			playerInfo.x = player.position.x;
			playerInfo.y = player.position.y;
			playerInfo.z = player.position.z;
			socket.emit('position change', test);
		}
		if (Object.keys(renderedPlayers).length < Object.keys(players).length)
			for (var key in players)
				if (!(key in renderedPlayers))
					loadOtherPlayer(key, loader);
	}
}

function _createTextLabel() {
	var div = document.createElement('div');
	div.className = 'text-label';
	div.style.position = 'absolute';
	div.style.width = 100;
	div.style.height = 100;
	div.innerHTML = "";
	div.style.top = -1000;
	div.style.left = -1000;
	div.style.color = 'brown';
	var _this = this;

	return {
		element: div,
		parent: false,
		position: new THREE.Vector3(0,0,0),
		setHTML: function(html) {
			this.element.innerHTML = html;
		},
		setParent: function(threejsobj) {
			this.parent = threejsobj;
		},
		updatePosition: function() {
			if(parent) {
				this.position.copy(this.parent.position);
			}
			var coords2d = this.get2DCoords(this.position, _this.camera);
			this.element.style.left = coords2d.x + 'px';
			this.element.style.top = coords2d.y + 'px';
		},
		get2DCoords: function(position, camera) {
			var vector = position.project(camera);
			vector.x = (vector.x + 1)/2 * window.innerWidth;
			vector.y = -(vector.y - 1)/2 * window.innerHeight;
			return vector;
		}
	};
 }

function connect(username){
	loadPlayer(username);
	var chat = document.getElementById("chat");
	var prompt = document.getElementById("usernameprompt");
	var popup = document.getElementById("popupheader");
        chat.contentWindow.postMessage(prompt.value, 'http://localhost:3004');
}


